// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/app/provider/v1beta1/resources.proto

package providerv1beta1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Defines the view modes.
type ViewMode int32

const (
	ViewMode_VIEW_MODE_INVALID ViewMode = 0
	// The resource can be opened but not downloaded.
	ViewMode_VIEW_MODE_VIEW_ONLY ViewMode = 1
	// The resource can be downloaded.
	ViewMode_VIEW_MODE_READ_ONLY ViewMode = 2
	// The resource can be downloaded and updated. The underlying application
	// MUST be a fully capable editor to support this mode.
	ViewMode_VIEW_MODE_READ_WRITE ViewMode = 3
	// The resource can be downloaded and updated, but must be shown in
	// preview mode. If the underlying application does not support a preview mode,
	// or if in a view-only mode users are not allowed to switch to edit mode,
	// then this mode MUST fall back to READ_WRITE.
	ViewMode_VIEW_MODE_PREVIEW ViewMode = 4
)

var ViewMode_name = map[int32]string{
	0: "VIEW_MODE_INVALID",
	1: "VIEW_MODE_VIEW_ONLY",
	2: "VIEW_MODE_READ_ONLY",
	3: "VIEW_MODE_READ_WRITE",
	4: "VIEW_MODE_PREVIEW",
}

var ViewMode_value = map[string]int32{
	"VIEW_MODE_INVALID":    0,
	"VIEW_MODE_VIEW_ONLY":  1,
	"VIEW_MODE_READ_ONLY":  2,
	"VIEW_MODE_READ_WRITE": 3,
	"VIEW_MODE_PREVIEW":    4,
}

func (x ViewMode) String() string {
	return proto.EnumName(ViewMode_name, int32(x))
}

func (ViewMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3a36ae8e74be4dc, []int{0}
}

// Defines the valid targets for an app URL.
type Target int32

const (
	Target_TARGET_INVALID Target = 0
	// The app URL is to be opened within an iframe
	Target_TARGET_IFRAME Target = 1
	// The app URL is to be opened on a new blank page
	Target_TARGET_BLANK Target = 2
)

var Target_name = map[int32]string{
	0: "TARGET_INVALID",
	1: "TARGET_IFRAME",
	2: "TARGET_BLANK",
}

var Target_value = map[string]int32{
	"TARGET_INVALID": 0,
	"TARGET_IFRAME":  1,
	"TARGET_BLANK":   2,
}

func (x Target) String() string {
	return proto.EnumName(Target_name, int32(x))
}

func (Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3a36ae8e74be4dc, []int{1}
}

// Represents the information for the app URL to be called by the clients.
type OpenInAppURL struct {
	// REQUIRED.
	// The URL that clients will perform requests to.
	AppUrl string `protobuf:"bytes,1,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// REQUIRED.
	// The method for the request to be made.
	// Only GET and POST are supported.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// OPTIONAL.
	// The form parameters which have to be passed along with the request.
	// These are sent only if the method is 'POST'.
	FormParameters map[string]string `protobuf:"bytes,3,rep,name=form_parameters,json=formParameters,proto3" json:"form_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// OPTIONAL.
	// The headers to be added to the request.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// REQUIRED.
	// Whether the target for the app URL is an iframe or a new page.
	Target               Target   `protobuf:"varint,5,opt,name=target,proto3,enum=cs3.app.provider.v1beta1.Target" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenInAppURL) Reset()         { *m = OpenInAppURL{} }
func (m *OpenInAppURL) String() string { return proto.CompactTextString(m) }
func (*OpenInAppURL) ProtoMessage()    {}
func (*OpenInAppURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a36ae8e74be4dc, []int{0}
}

func (m *OpenInAppURL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenInAppURL.Unmarshal(m, b)
}
func (m *OpenInAppURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenInAppURL.Marshal(b, m, deterministic)
}
func (m *OpenInAppURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenInAppURL.Merge(m, src)
}
func (m *OpenInAppURL) XXX_Size() int {
	return xxx_messageInfo_OpenInAppURL.Size(m)
}
func (m *OpenInAppURL) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenInAppURL.DiscardUnknown(m)
}

var xxx_messageInfo_OpenInAppURL proto.InternalMessageInfo

func (m *OpenInAppURL) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *OpenInAppURL) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *OpenInAppURL) GetFormParameters() map[string]string {
	if m != nil {
		return m.FormParameters
	}
	return nil
}

func (m *OpenInAppURL) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *OpenInAppURL) GetTarget() Target {
	if m != nil {
		return m.Target
	}
	return Target_TARGET_INVALID
}

func init() {
	proto.RegisterEnum("cs3.app.provider.v1beta1.ViewMode", ViewMode_name, ViewMode_value)
	proto.RegisterEnum("cs3.app.provider.v1beta1.Target", Target_name, Target_value)
	proto.RegisterType((*OpenInAppURL)(nil), "cs3.app.provider.v1beta1.OpenInAppURL")
	proto.RegisterMapType((map[string]string)(nil), "cs3.app.provider.v1beta1.OpenInAppURL.FormParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "cs3.app.provider.v1beta1.OpenInAppURL.HeadersEntry")
}

func init() {
	proto.RegisterFile("cs3/app/provider/v1beta1/resources.proto", fileDescriptor_f3a36ae8e74be4dc)
}

var fileDescriptor_f3a36ae8e74be4dc = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x76, 0x9b, 0xc2, 0x10, 0x52, 0x77, 0x5b, 0xa8, 0x55, 0x71, 0x88, 0x38, 0x45, 0x3d,
	0x6c, 0x94, 0xfa, 0x52, 0xe5, 0xb6, 0x69, 0x5c, 0xb0, 0xc8, 0x87, 0xb5, 0x4a, 0x53, 0x81, 0x22,
	0x45, 0x5b, 0x67, 0x4b, 0x2b, 0xe2, 0xec, 0x68, 0xed, 0x04, 0xf5, 0xc0, 0x8d, 0x5f, 0xc2, 0x11,
	0xf1, 0x4b, 0xf8, 0x55, 0xc8, 0x5f, 0x90, 0x20, 0x22, 0xc1, 0x6d, 0xe7, 0xbd, 0x37, 0x6f, 0x46,
	0x4f, 0xb3, 0xd0, 0x08, 0x63, 0xb7, 0x29, 0x10, 0x9b, 0xa8, 0xd5, 0xea, 0x7e, 0x26, 0x75, 0x73,
	0xd5, 0xba, 0x91, 0x89, 0x68, 0x35, 0xb5, 0x8c, 0xd5, 0x52, 0x87, 0x32, 0xa6, 0xa8, 0x55, 0xa2,
	0x88, 0x13, 0xc6, 0x2e, 0x15, 0x88, 0xb4, 0x54, 0xd2, 0x42, 0xf9, 0xea, 0xbb, 0x05, 0xd5, 0x21,
	0xca, 0x85, 0xbf, 0x60, 0x88, 0x57, 0xbc, 0x47, 0x8e, 0x61, 0x4f, 0x20, 0x4e, 0x97, 0x7a, 0xee,
	0x18, 0x75, 0xa3, 0xf1, 0x84, 0x57, 0x04, 0xe2, 0x95, 0x9e, 0x93, 0x17, 0x50, 0x89, 0x64, 0x72,
	0xa7, 0x66, 0x8e, 0x99, 0xe3, 0x79, 0x45, 0x42, 0xd8, 0xbf, 0x55, 0x3a, 0x9a, 0xa2, 0xd0, 0x22,
	0x92, 0x89, 0xd4, 0xb1, 0x63, 0xd5, 0xad, 0xc6, 0xd3, 0xb3, 0x36, 0xdd, 0x36, 0x95, 0xae, 0x4f,
	0xa4, 0x97, 0x4a, 0x47, 0xc1, 0xaf, 0x66, 0x6f, 0x91, 0xe8, 0x07, 0x5e, 0xbb, 0xdd, 0x00, 0x49,
	0x1f, 0xf6, 0xee, 0xa4, 0x98, 0xa5, 0xe6, 0x3b, 0x99, 0xb9, 0xfb, 0x8f, 0xe6, 0x6f, 0xf2, 0xae,
	0xdc, 0xb5, 0xf4, 0x20, 0xe7, 0x50, 0x49, 0x84, 0xfe, 0x20, 0x13, 0x67, 0xb7, 0x6e, 0x34, 0x6a,
	0x67, 0xf5, 0xed, 0x6e, 0xa3, 0x4c, 0xc7, 0x0b, 0xfd, 0x09, 0x83, 0xc3, 0xbf, 0xec, 0x4b, 0x6c,
	0xb0, 0x3e, 0xca, 0x87, 0x22, 0xb1, 0xf4, 0x49, 0x8e, 0x60, 0x77, 0x25, 0xe6, 0x4b, 0x59, 0xa4,
	0x95, 0x17, 0x6d, 0xf3, 0xdc, 0x38, 0x69, 0x43, 0x75, 0x7d, 0xab, 0xff, 0xe9, 0x3d, 0xfd, 0x62,
	0xc0, 0xe3, 0xf1, 0xbd, 0xfc, 0xd4, 0x57, 0x33, 0x49, 0x9e, 0xc3, 0xc1, 0xd8, 0xf7, 0xae, 0xa7,
	0xfd, 0x61, 0xd7, 0x9b, 0xfa, 0x83, 0x31, 0xeb, 0xf9, 0x5d, 0xfb, 0x11, 0x39, 0x86, 0xc3, 0xdf,
	0x70, 0xf6, 0x1a, 0x0e, 0x7a, 0xef, 0x6c, 0x63, 0x93, 0xe0, 0x1e, 0xeb, 0xe6, 0x84, 0x49, 0x1c,
	0x38, 0xfa, 0x83, 0xb8, 0xe6, 0xfe, 0xc8, 0xb3, 0xad, 0xcd, 0x11, 0x01, 0xf7, 0xd2, 0xc2, 0xde,
	0x39, 0x65, 0x50, 0xc9, 0x73, 0x21, 0x04, 0x6a, 0x23, 0xc6, 0x5f, 0x7b, 0xa3, 0xb5, 0x05, 0x0e,
	0xe0, 0x59, 0x89, 0x5d, 0x72, 0xd6, 0xf7, 0x6c, 0x83, 0xd8, 0x50, 0x2d, 0xa0, 0x4e, 0x8f, 0x0d,
	0xde, 0xda, 0x66, 0xe7, 0x33, 0xbc, 0x0c, 0x55, 0xb4, 0x35, 0xf7, 0x4e, 0x8d, 0x97, 0x37, 0x1c,
	0xa4, 0x27, 0x1c, 0x18, 0xef, 0xf7, 0x4b, 0x4d, 0x21, 0xf9, 0x6a, 0x5a, 0x17, 0x2c, 0xf8, 0x66,
	0x3a, 0x17, 0xb1, 0x4b, 0x19, 0x22, 0x0d, 0x4a, 0x8f, 0x71, 0xab, 0x93, 0x0a, 0x7e, 0x64, 0xd4,
	0x84, 0x21, 0x4e, 0x4a, 0x6a, 0x52, 0x50, 0x37, 0x95, 0xec, 0x63, 0xb8, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x85, 0x9b, 0x05, 0x50, 0x44, 0x03, 0x00, 0x00,
}
