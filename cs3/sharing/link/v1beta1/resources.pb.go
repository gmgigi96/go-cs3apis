// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/sharing/link/v1beta1/resources.proto

package linkv1beta1

import (
	fmt "fmt"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Public share are relationships between a resource owner
// (usually the authenticated user) who grants permissions to a recipient (grantee)
// on a specified resource (resource_id). UserShares represents both user and groups.
// TODO(labkode): do we need to have  resource_type stored on the share?
// This is not needed if when getting the shares a stat operation is launched against the
// the storage provider.
type PublicShare struct {
	// REQUIRED.
	// Opaque unique identifier of the share.
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED.
	// The unlisted token to give public access
	// to the public share.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// REQUIRED.
	// Unique identifier of the shared resource.
	ResourceId *v1beta1.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED.
	// Permissions for the grantee to use
	// the resource.
	Permissions *PublicSharePermissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// REQUIRED.
	// Uniquely identifies the owner of the share
	// (the resource owner at the time of creating the share).
	// In case the ownership of the underlying resource changes
	// the share owner field MAY change to reflect the change of ownsership.
	Owner *v1beta11.UserId `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	// REQUIRED.
	// Uniquely identifies a principal who initiates the share creation.
	// A creator can create shares on behalf of the owner (because of re-sharing,
	// because belonging to special groups, ...).
	// Creator and owner often result in being the same principal.
	Creator *v1beta11.UserId `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	// REQUIRED.
	// Creation time of the share.
	Ctime *v1beta12.Timestamp `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// REQUIRED.
	// Last modification time of the share.
	Mtime *v1beta12.Timestamp `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// REQUIRED.
	// Determines if the public share is password protected or not.
	PasswordProtected bool `protobuf:"varint,9,opt,name=password_protected,json=passwordProtected,proto3" json:"password_protected,omitempty"`
	// OPTIONAL.
	// The expiration time for the public share.
	Expiration *v1beta12.Timestamp `protobuf:"bytes,10,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// OPTIONAL.
	// Display name for the shared resource (such as file, directory basename or any
	// user defined name).
	// The display name MAY be different than the actual resource basename.
	// This field is only useful for informational purposes, like for example,
	// setting the window title in a public share HTML page.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// OPTIONAL.
	// A time constrained token with which
	// GetPublicSharebyToken requests can be
	// authenticated.
	Signature *ShareSignature `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
	// OPTIONAL
	// A bool value indicating if the link is the quicklink
	// the server will enforce a maximum of 1 quicklink per resource
	Quicklink bool `protobuf:"varint,13,opt,name=quicklink,proto3" json:"quicklink,omitempty"`
	// OPTIONAL
	// Description of the share.
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// OPTIONAL
	// Whether to notify the owner of a share when a file is uploaded to it.
	NotifyUploads bool `protobuf:"varint,15,opt,name=notify_uploads,json=notifyUploads,proto3" json:"notify_uploads,omitempty"`
	// OPTIONAL
	// Comma-separated list of extra email addresses to notify when a file is
	// uploaded to the share.
	NotifyUploadsExtraRecipients string   `protobuf:"bytes,16,opt,name=notify_uploads_extra_recipients,json=notifyUploadsExtraRecipients,proto3" json:"notify_uploads_extra_recipients,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *PublicShare) Reset()         { *m = PublicShare{} }
func (m *PublicShare) String() string { return proto.CompactTextString(m) }
func (*PublicShare) ProtoMessage()    {}
func (*PublicShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{0}
}

func (m *PublicShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShare.Unmarshal(m, b)
}
func (m *PublicShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShare.Marshal(b, m, deterministic)
}
func (m *PublicShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShare.Merge(m, src)
}
func (m *PublicShare) XXX_Size() int {
	return xxx_messageInfo_PublicShare.Size(m)
}
func (m *PublicShare) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShare.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShare proto.InternalMessageInfo

func (m *PublicShare) GetId() *PublicShareId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PublicShare) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PublicShare) GetResourceId() *v1beta1.ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *PublicShare) GetPermissions() *PublicSharePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *PublicShare) GetOwner() *v1beta11.UserId {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PublicShare) GetCreator() *v1beta11.UserId {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PublicShare) GetCtime() *v1beta12.Timestamp {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *PublicShare) GetMtime() *v1beta12.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *PublicShare) GetPasswordProtected() bool {
	if m != nil {
		return m.PasswordProtected
	}
	return false
}

func (m *PublicShare) GetExpiration() *v1beta12.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *PublicShare) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PublicShare) GetSignature() *ShareSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublicShare) GetQuicklink() bool {
	if m != nil {
		return m.Quicklink
	}
	return false
}

func (m *PublicShare) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PublicShare) GetNotifyUploads() bool {
	if m != nil {
		return m.NotifyUploads
	}
	return false
}

func (m *PublicShare) GetNotifyUploadsExtraRecipients() string {
	if m != nil {
		return m.NotifyUploadsExtraRecipients
	}
	return ""
}

// The permissions for a share.
type PublicSharePermissions struct {
	Permissions          *v1beta1.ResourcePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PublicSharePermissions) Reset()         { *m = PublicSharePermissions{} }
func (m *PublicSharePermissions) String() string { return proto.CompactTextString(m) }
func (*PublicSharePermissions) ProtoMessage()    {}
func (*PublicSharePermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{1}
}

func (m *PublicSharePermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicSharePermissions.Unmarshal(m, b)
}
func (m *PublicSharePermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicSharePermissions.Marshal(b, m, deterministic)
}
func (m *PublicSharePermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicSharePermissions.Merge(m, src)
}
func (m *PublicSharePermissions) XXX_Size() int {
	return xxx_messageInfo_PublicSharePermissions.Size(m)
}
func (m *PublicSharePermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicSharePermissions.DiscardUnknown(m)
}

var xxx_messageInfo_PublicSharePermissions proto.InternalMessageInfo

func (m *PublicSharePermissions) GetPermissions() *v1beta1.ResourcePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// A share id identifies uniquely a // share in the share provider namespace.
// A ShareId MUST be unique inside the share provider.
type PublicShareId struct {
	// REQUIRED.
	// The internal id used by service implementor to
	// uniquely identity the share in the internal
	// implementation of the service.
	OpaqueId             string   `protobuf:"bytes,2,opt,name=opaque_id,json=opaqueId,proto3" json:"opaque_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicShareId) Reset()         { *m = PublicShareId{} }
func (m *PublicShareId) String() string { return proto.CompactTextString(m) }
func (*PublicShareId) ProtoMessage()    {}
func (*PublicShareId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{2}
}

func (m *PublicShareId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShareId.Unmarshal(m, b)
}
func (m *PublicShareId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShareId.Marshal(b, m, deterministic)
}
func (m *PublicShareId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShareId.Merge(m, src)
}
func (m *PublicShareId) XXX_Size() int {
	return xxx_messageInfo_PublicShareId.Size(m)
}
func (m *PublicShareId) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShareId.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShareId proto.InternalMessageInfo

func (m *PublicShareId) GetOpaqueId() string {
	if m != nil {
		return m.OpaqueId
	}
	return ""
}

// The mechanism to identify a share
// in the share provider namespace.
type PublicShareReference struct {
	// REQUIRED.
	// One of the specifications MUST be specified.
	//
	// Types that are valid to be assigned to Spec:
	//	*PublicShareReference_Id
	//	*PublicShareReference_Token
	Spec                 isPublicShareReference_Spec `protobuf_oneof:"spec"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PublicShareReference) Reset()         { *m = PublicShareReference{} }
func (m *PublicShareReference) String() string { return proto.CompactTextString(m) }
func (*PublicShareReference) ProtoMessage()    {}
func (*PublicShareReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{3}
}

func (m *PublicShareReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShareReference.Unmarshal(m, b)
}
func (m *PublicShareReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShareReference.Marshal(b, m, deterministic)
}
func (m *PublicShareReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShareReference.Merge(m, src)
}
func (m *PublicShareReference) XXX_Size() int {
	return xxx_messageInfo_PublicShareReference.Size(m)
}
func (m *PublicShareReference) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShareReference.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShareReference proto.InternalMessageInfo

type isPublicShareReference_Spec interface {
	isPublicShareReference_Spec()
}

type PublicShareReference_Id struct {
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type PublicShareReference_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*PublicShareReference_Id) isPublicShareReference_Spec() {}

func (*PublicShareReference_Token) isPublicShareReference_Spec() {}

func (m *PublicShareReference) GetSpec() isPublicShareReference_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PublicShareReference) GetId() *PublicShareId {
	if x, ok := m.GetSpec().(*PublicShareReference_Id); ok {
		return x.Id
	}
	return nil
}

func (m *PublicShareReference) GetToken() string {
	if x, ok := m.GetSpec().(*PublicShareReference_Token); ok {
		return x.Token
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublicShareReference) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublicShareReference_Id)(nil),
		(*PublicShareReference_Token)(nil),
	}
}

// The mechanism to authenticate a request to
// GetPublicShareByToken.
type PublicShareAuthentication struct {
	// Types that are valid to be assigned to Spec:
	//	*PublicShareAuthentication_Password
	//	*PublicShareAuthentication_Signature
	Spec                 isPublicShareAuthentication_Spec `protobuf_oneof:"spec"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PublicShareAuthentication) Reset()         { *m = PublicShareAuthentication{} }
func (m *PublicShareAuthentication) String() string { return proto.CompactTextString(m) }
func (*PublicShareAuthentication) ProtoMessage()    {}
func (*PublicShareAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{4}
}

func (m *PublicShareAuthentication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShareAuthentication.Unmarshal(m, b)
}
func (m *PublicShareAuthentication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShareAuthentication.Marshal(b, m, deterministic)
}
func (m *PublicShareAuthentication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShareAuthentication.Merge(m, src)
}
func (m *PublicShareAuthentication) XXX_Size() int {
	return xxx_messageInfo_PublicShareAuthentication.Size(m)
}
func (m *PublicShareAuthentication) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShareAuthentication.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShareAuthentication proto.InternalMessageInfo

type isPublicShareAuthentication_Spec interface {
	isPublicShareAuthentication_Spec()
}

type PublicShareAuthentication_Password struct {
	Password string `protobuf:"bytes,1,opt,name=password,proto3,oneof"`
}

type PublicShareAuthentication_Signature struct {
	Signature *ShareSignature `protobuf:"bytes,2,opt,name=signature,proto3,oneof"`
}

func (*PublicShareAuthentication_Password) isPublicShareAuthentication_Spec() {}

func (*PublicShareAuthentication_Signature) isPublicShareAuthentication_Spec() {}

func (m *PublicShareAuthentication) GetSpec() isPublicShareAuthentication_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PublicShareAuthentication) GetPassword() string {
	if x, ok := m.GetSpec().(*PublicShareAuthentication_Password); ok {
		return x.Password
	}
	return ""
}

func (m *PublicShareAuthentication) GetSignature() *ShareSignature {
	if x, ok := m.GetSpec().(*PublicShareAuthentication_Signature); ok {
		return x.Signature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublicShareAuthentication) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublicShareAuthentication_Password)(nil),
		(*PublicShareAuthentication_Signature)(nil),
	}
}

// A time constrained token which can be used to
// authenticate link share requests.
type ShareSignature struct {
	// REQUIRED.
	// The signature value.
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// REQUIRED.
	// The time until the signature becomes invalid.
	SignatureExpiration  *v1beta12.Timestamp `protobuf:"bytes,2,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ShareSignature) Reset()         { *m = ShareSignature{} }
func (m *ShareSignature) String() string { return proto.CompactTextString(m) }
func (*ShareSignature) ProtoMessage()    {}
func (*ShareSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{5}
}

func (m *ShareSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareSignature.Unmarshal(m, b)
}
func (m *ShareSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareSignature.Marshal(b, m, deterministic)
}
func (m *ShareSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareSignature.Merge(m, src)
}
func (m *ShareSignature) XXX_Size() int {
	return xxx_messageInfo_ShareSignature.Size(m)
}
func (m *ShareSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ShareSignature proto.InternalMessageInfo

func (m *ShareSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ShareSignature) GetSignatureExpiration() *v1beta12.Timestamp {
	if m != nil {
		return m.SignatureExpiration
	}
	return nil
}

// Defines the restrictions for the public share.
type Grant struct {
	// REQUIRED.
	// The permissions for the share.
	Permissions *PublicSharePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// OPTIONAL.
	// A password to protect the access to the public share.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// OPTIONAL.
	// An expiration date to protect the access to the public share.
	Expiration           *v1beta12.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Grant) Reset()         { *m = Grant{} }
func (m *Grant) String() string { return proto.CompactTextString(m) }
func (*Grant) ProtoMessage()    {}
func (*Grant) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f13c61869aaebc4, []int{6}
}

func (m *Grant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Grant.Unmarshal(m, b)
}
func (m *Grant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Grant.Marshal(b, m, deterministic)
}
func (m *Grant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grant.Merge(m, src)
}
func (m *Grant) XXX_Size() int {
	return xxx_messageInfo_Grant.Size(m)
}
func (m *Grant) XXX_DiscardUnknown() {
	xxx_messageInfo_Grant.DiscardUnknown(m)
}

var xxx_messageInfo_Grant proto.InternalMessageInfo

func (m *Grant) GetPermissions() *PublicSharePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Grant) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Grant) GetExpiration() *v1beta12.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicShare)(nil), "cs3.sharing.link.v1beta1.PublicShare")
	proto.RegisterType((*PublicSharePermissions)(nil), "cs3.sharing.link.v1beta1.PublicSharePermissions")
	proto.RegisterType((*PublicShareId)(nil), "cs3.sharing.link.v1beta1.PublicShareId")
	proto.RegisterType((*PublicShareReference)(nil), "cs3.sharing.link.v1beta1.PublicShareReference")
	proto.RegisterType((*PublicShareAuthentication)(nil), "cs3.sharing.link.v1beta1.PublicShareAuthentication")
	proto.RegisterType((*ShareSignature)(nil), "cs3.sharing.link.v1beta1.ShareSignature")
	proto.RegisterType((*Grant)(nil), "cs3.sharing.link.v1beta1.Grant")
}

func init() {
	proto.RegisterFile("cs3/sharing/link/v1beta1/resources.proto", fileDescriptor_2f13c61869aaebc4)
}

var fileDescriptor_2f13c61869aaebc4 = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0x66, 0x0d, 0x36, 0xf6, 0x59, 0x70, 0xdb, 0x29, 0x42, 0x53, 0xea, 0xaa, 0xc6, 0x52, 0x55,
	0x57, 0xa2, 0xeb, 0x1a, 0x5f, 0xa0, 0xaa, 0xbd, 0xa9, 0x11, 0xad, 0x2d, 0xa1, 0xc6, 0x5a, 0x87,
	0x5c, 0x44, 0x48, 0xd6, 0xb0, 0x3b, 0xc0, 0x08, 0xef, 0xce, 0x32, 0x33, 0x0b, 0xf8, 0x2a, 0x0f,
	0x90, 0xb7, 0xc8, 0x65, 0xee, 0xf3, 0x12, 0x79, 0x89, 0xbc, 0x4a, 0x34, 0xb3, 0x3f, 0x5e, 0x47,
	0x38, 0x32, 0x51, 0xee, 0x3c, 0xe7, 0x7c, 0xdf, 0x37, 0x67, 0xf6, 0x7c, 0xe7, 0x18, 0xda, 0x9e,
	0xec, 0x75, 0xe4, 0x35, 0x11, 0x2c, 0xbc, 0xea, 0x4c, 0x59, 0x78, 0xd3, 0xb9, 0xeb, 0x5e, 0x50,
	0x45, 0xba, 0x1d, 0x41, 0x25, 0x8f, 0x85, 0x47, 0xa5, 0x13, 0x09, 0xae, 0x38, 0xc2, 0x9e, 0xec,
	0x39, 0x29, 0xd2, 0xd1, 0x48, 0x27, 0x45, 0xee, 0xfd, 0xa6, 0x35, 0x98, 0x4f, 0x43, 0xc5, 0xd4,
	0xac, 0x13, 0x4b, 0x2a, 0x96, 0x89, 0xec, 0x1d, 0x98, 0xeb, 0x14, 0x17, 0xe4, 0x8a, 0x76, 0x22,
	0xc1, 0xef, 0x98, 0xff, 0x19, 0xf4, 0x4f, 0x1a, 0xad, 0x66, 0x11, 0x95, 0x39, 0xc4, 0x9c, 0x92,
	0x74, 0xeb, 0x43, 0x05, 0xec, 0x51, 0x7c, 0x31, 0x65, 0xde, 0xf8, 0x9a, 0x08, 0x8a, 0x8e, 0xa0,
	0xc4, 0x7c, 0x6c, 0x35, 0xad, 0xb6, 0x7d, 0xf8, 0xab, 0xb3, 0xac, 0x5c, 0xa7, 0x40, 0x19, 0xfa,
	0x6e, 0x89, 0xf9, 0x68, 0x07, 0xca, 0x8a, 0xdf, 0xd0, 0x10, 0x97, 0x9a, 0x56, 0xbb, 0xe6, 0x26,
	0x07, 0x34, 0x04, 0x3b, 0x2b, 0x68, 0xc2, 0x7c, 0xbc, 0x6e, 0x74, 0xdb, 0x89, 0x6e, 0xf2, 0x02,
	0x27, 0x7b, 0x41, 0xae, 0xed, 0xa6, 0x84, 0xa1, 0xef, 0x82, 0xc8, 0x7f, 0x23, 0x17, 0xec, 0x88,
	0x8a, 0x80, 0x49, 0xc9, 0x78, 0x28, 0xf1, 0x86, 0x91, 0xfa, 0x63, 0xa5, 0x12, 0x47, 0x73, 0x9e,
	0x5b, 0x14, 0x41, 0x47, 0x50, 0xe6, 0xf7, 0x21, 0x15, 0xb8, 0x6c, 0xd4, 0xf6, 0x8d, 0x5a, 0xd6,
	0x05, 0x47, 0x77, 0x21, 0x97, 0x3b, 0x93, 0x54, 0x0c, 0x7d, 0x37, 0xc1, 0xa3, 0xbf, 0x60, 0xd3,
	0x13, 0x94, 0x28, 0x2e, 0x70, 0x65, 0x55, 0x6a, 0xc6, 0x40, 0x87, 0x50, 0xf6, 0x14, 0x0b, 0x28,
	0xde, 0x34, 0xd4, 0x86, 0xa1, 0x26, 0x4d, 0xc9, 0x28, 0xcf, 0x59, 0x40, 0xa5, 0x22, 0x41, 0xe4,
	0x26, 0x50, 0xcd, 0x09, 0x0c, 0xa7, 0xba, 0x0a, 0xc7, 0x40, 0xd1, 0xef, 0x80, 0x22, 0x22, 0xe5,
	0x3d, 0x17, 0xfe, 0x44, 0x77, 0x9b, 0x7a, 0x8a, 0xfa, 0xb8, 0xd6, 0xb4, 0xda, 0x55, 0xf7, 0xbb,
	0x2c, 0x33, 0xca, 0x12, 0xe8, 0x6f, 0x00, 0xfa, 0x10, 0x31, 0x41, 0x14, 0xe3, 0x21, 0x86, 0x15,
	0xee, 0x29, 0xe0, 0xd1, 0x3e, 0x6c, 0xf9, 0x4c, 0x46, 0x53, 0x32, 0x9b, 0x84, 0x24, 0xa0, 0xd8,
	0x36, 0x36, 0xb0, 0xd3, 0xd8, 0xff, 0x24, 0xa0, 0xe8, 0x5f, 0xa8, 0x49, 0x76, 0x15, 0x12, 0x15,
	0x0b, 0x8a, 0xb7, 0x8a, 0x56, 0x78, 0xac, 0x7f, 0xa6, 0x73, 0xe3, 0x0c, 0xef, 0xce, 0xa9, 0xa8,
	0x01, 0xb5, 0xdb, 0x98, 0x79, 0x37, 0x1a, 0x8e, 0xb7, 0xcd, 0x73, 0xe6, 0x01, 0xd4, 0x04, 0xdb,
	0xa7, 0xd2, 0x13, 0x2c, 0x32, 0xef, 0xa8, 0xa7, 0x75, 0xcc, 0x43, 0xe8, 0x17, 0xa8, 0x87, 0x5c,
	0xb1, 0xcb, 0xd9, 0x24, 0x8e, 0xa6, 0x9c, 0xf8, 0x12, 0x7f, 0x63, 0x44, 0xb6, 0x93, 0xe8, 0x59,
	0x12, 0x44, 0x27, 0xf0, 0xf3, 0x22, 0x6c, 0x42, 0x1f, 0x94, 0x20, 0x13, 0x41, 0x3d, 0x16, 0x31,
	0x1a, 0x2a, 0x89, 0xbf, 0x35, 0xe2, 0x8d, 0x05, 0xde, 0x89, 0x06, 0xb9, 0x39, 0xa6, 0x15, 0xc0,
	0xee, 0xe3, 0x56, 0x44, 0xe3, 0x45, 0x47, 0x27, 0x43, 0xd7, 0x5d, 0x6d, 0x38, 0x96, 0x59, 0xba,
	0x75, 0x00, 0xdb, 0x0b, 0xc3, 0x89, 0x7e, 0x84, 0x1a, 0x8f, 0xc8, 0x6d, 0x6c, 0x06, 0x30, 0x19,
	0xce, 0x6a, 0x12, 0x18, 0xfa, 0xad, 0x5b, 0xd8, 0x29, 0xa0, 0x5d, 0x7a, 0x49, 0x05, 0x0d, 0x3d,
	0x8a, 0xfe, 0xfc, 0x82, 0x35, 0x30, 0x58, 0x33, 0x8b, 0x60, 0x77, 0x61, 0x11, 0x0c, 0xd6, 0xd2,
	0x55, 0xd0, 0xaf, 0xc0, 0x86, 0x8c, 0xa8, 0xd7, 0x7a, 0x6d, 0xc1, 0x0f, 0x05, 0xde, 0x3f, 0xb1,
	0xba, 0xd6, 0x43, 0xe3, 0x25, 0x36, 0x6a, 0x40, 0x35, 0x73, 0xa6, 0xb9, 0x5e, 0x0b, 0xe4, 0x11,
	0x34, 0x28, 0x3a, 0xa8, 0xf4, 0x34, 0x07, 0x0d, 0xd6, 0x0a, 0x1e, 0xca, 0xab, 0x79, 0x05, 0xf5,
	0x45, 0x98, 0x76, 0xd7, 0xfc, 0x0e, 0x53, 0x42, 0xd1, 0x7b, 0xcf, 0x60, 0x27, 0x3f, 0x4c, 0x0a,
	0xe3, 0x52, 0x5a, 0x61, 0x5c, 0xbe, 0xcf, 0x99, 0x27, 0x39, 0xb1, 0xf5, 0xce, 0x82, 0xf2, 0x7f,
	0x82, 0x84, 0xea, 0xd3, 0x05, 0x67, 0x7d, 0x8d, 0x05, 0xb7, 0x57, 0xf8, 0x9c, 0x69, 0xef, 0xf3,
	0x8f, 0xb9, 0x38, 0xef, 0xeb, 0x4f, 0x9b, 0xf7, 0xfe, 0x0c, 0x1a, 0x1e, 0x0f, 0x96, 0x56, 0xd7,
	0xaf, 0x67, 0x4e, 0x95, 0x7a, 0xc3, 0xf0, 0x91, 0xf5, 0xd2, 0xd6, 0xf9, 0x34, 0xfd, 0xa6, 0xb4,
	0x7e, 0x3c, 0x3e, 0x7d, 0x5b, 0xc2, 0xc7, 0xb2, 0x67, 0xfa, 0xa4, 0xf9, 0xa7, 0x9a, 0xff, 0xa2,
	0xdb, 0xd7, 0x80, 0xf7, 0x26, 0x75, 0x9e, 0xa6, 0xce, 0x75, 0xea, 0x3c, 0x4d, 0x5d, 0x54, 0xcc,
	0x5f, 0x57, 0xef, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x46, 0xa1, 0x6b, 0x78, 0x07, 0x00,
	0x00,
}
